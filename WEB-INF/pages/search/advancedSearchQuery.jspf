<%

Connection dbcon = ds.getConnection();

try {
  int searchOffset = (Integer.parseInt(searchPage) - 1) * Integer.parseInt(searchLimit);
  String orderColumn = searchOrder.split(" ")[0];
  String orderDirection = searchOrder.split(" ")[1];

  String searchStarQuery = "";
  String[] starInputs = searchStar.trim().split(" ");
  String starFirstName = "";
  String starLastName = "";

  if (starInputs.length == 1) {
    searchStarQuery = "OR stars.last_name LIKE ? ) AS b ON a.id = b.movie_id ";
    starFirstName = starInputs[0];
  } else if (starInputs.length == 2) {
    searchStarQuery = "AND stars.last_name LIKE ? ) AS b ON a.id = b.movie_id ";
    starFirstName = starInputs[0];
    starLastName = starInputs[1];
  }

  String searchGenreQuery = 
    "INNER JOIN " +
    "(SELECT DISTINCT movie_id from genres_in_movies " +
    "WHERE genres_in_movies.genre_id LIKE ? ) AS movie_genres " + 
    "ON movie_genres.movie_id = a.id ";

  query += (
    "FROM movies AS a " +
    "INNER JOIN " +
    "(" +
    "  SELECT DISTINCT movie_id FROM stars_in_movies " +
    "  INNER JOIN stars ON stars_in_movies.star_id = stars.id " +
    "  WHERE stars.first_name LIKE ? " +
    searchStarQuery +
    searchGenreQuery +
    "WHERE a.title LIKE ? " +
    "AND a.year LIKE ? " +
    "AND a.director LIKE ? "
  );
  String queryWithOrder = "SELECT * " + query + "ORDER BY " + searchOrder + " LIMIT ? OFFSET ?";

  %><%@ include file="pagination.jspf" %><%

  out.println(pagination);

  PreparedStatement statementWithOrder = dbcon.prepareStatement(queryWithOrder);

  try {
    statementWithOrder.setString(1, "%" + starFirstName + "%");
    statementWithOrder.setString(2, "%" + ("".equals(starLastName) ? starFirstName : starLastName) + "%");
    statementWithOrder.setString(3, "%" + searchGenre + "%");
    statementWithOrder.setString(4, ("".equals(browseByTitle) ? "%" : "") + searchTitle + "%");
    statementWithOrder.setString(5, "%" + searchYear + "%");
    statementWithOrder.setString(6, "%" + searchDirector + "%");
    statementWithOrder.setInt(7, Integer.parseInt(searchLimit));
    statementWithOrder.setInt(8, searchOffset);

    ResultSet rsWithOrder = statementWithOrder.executeQuery();

    try {
      HashMap<String, SearchRow> moviesMap = new HashMap<String, SearchRow>();
      String whereInStatementVariables = "";
      ArrayList<String> sortedMovies = new ArrayList<String>();

      while (rsWithOrder.next()) {
        String id = rsWithOrder.getString("id");
        String title = rsWithOrder.getString("title");
        String year = rsWithOrder.getString("year");
        String banner = rsWithOrder.getString("banner_url");
        SearchRow movie = new SearchRow(id, title, year, banner, rootPath);

        moviesMap.put(id, movie);
        sortedMovies.add(id);
        whereInStatementVariables += "?" + (rsWithOrder.isLast() ? "" : ",");
      }

      %>
      <%@ include file="processRows.jspf" %>
      <%@ include file="shoppingCartModal.jspf" %>
      <%
    } finally {
      rsWithOrder.close();
    }
  } finally {
    statementWithOrder.close();
  }
} catch (SQLException ex) {
  while (ex != null) {
    System.out.println ("SQL Exception: " + ex.getMessage());
    ex = ex.getNextException();
  }
} catch (java.lang.Exception ex) {
  out.println("<p>SQL error: " + ex.getMessage() + "</p>");
} finally {
  dbcon.close();
}
%>
