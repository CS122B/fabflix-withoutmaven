<%
  String loginUser = "testuser";
  String loginPasswd = "testpassword";
  String loginUrl = "jdbc:mysql://localhost:3306/moviedb";

  try {
	out.println("<h2>Search results for:</h2>");
	if (searchTitle != null && !"".equals(searchTitle))
		out.println("<h2>Title: " + searchTitle + "</h2>");
	if (searchYear != null && !"".equals(searchYear))
		out.println("<h2>Year: " + searchYear + "</h2>");
	if (searchDirector != null && !"".equals(searchDirector))
		out.println("<h2>Director: " + searchDirector + "</h2>");
	
	String sortResults = "search?title=" + searchTitle 
		 + "&year=" + searchYear
		 + "&director=" + searchDirector
		 + "&star=" + searchStar;
		 
	out.println(
		"SORT BY: "+
		" <a href='" + sortResults + "&numResults=" + searchLimit + "&orderBy=title+asc&search=advanced&pageNum=" + searchPage + "'>TITLE ASCENDING</a>" +
		" <a href='" + sortResults + "&numResults=" + searchLimit + "&orderBy=title+desc&search=advanced&pageNum=" + searchPage + "'>TITLE DESCENDING</a>" +
		" <a href='" + sortResults + "&numResults=" + searchLimit + "&orderBy=year+asc&search=advanced&pageNum=" + searchPage + "'>YEAR ASCENDING</a>" +
		" <a href='" + sortResults + "&numResults=" + searchLimit + "&orderBy=year+desc&search=advanced&pageNum=" + searchPage + "'>YEAR DESCENDING</a>");
	
	String changeNumResults = "";
	out.println(
		"RESULTS PER PAGE: " +
		" <a href='" + sortResults + "&numResults=25&orderBy=title+asc&search=advanced&pageNum=1'>25</a>" +
		" <a href='" + sortResults + "&numResults=50&orderBy=title+asc&search=advanced&pageNum=1'>50</a>" +
		" <a href='" + sortResults + "&numResults=100&orderBy=title+asc&search=advanced&pageNum=1'>100</a>");

    Class.forName("com.mysql.jdbc.Driver").newInstance();
    Connection dbcon = DriverManager.getConnection(loginUrl, loginUser, loginPasswd);

    int searchOffset = (Integer.parseInt(searchPage) - 1) * Integer.parseInt(searchLimit);
	String orderColumn = searchOrder.split(" ")[0];
	String orderDirection = searchOrder.split(" ")[1];
	
	String searchStarQuery = "";
	String[] starInputs = searchStar.trim().split(" ");
	String starFirstName = "";
	String starLastName = "";
	if (starInputs.length == 1)
	{
	  searchStarQuery = "or stars.last_name like ? ) as b ";
	  starFirstName = starInputs[0];
	}
	else if (starInputs.length == 2)
	{
	  searchStarQuery = "and stars.last_name like ? ) as b ";
	  starFirstName = starInputs[0];
	  starLastName = starInputs[1];
	}
	
    String query = (
	  "SELECT * FROM movies as a " + 
	  "INNER JOIN " + 
	  "(SELECT DISTINCT movie_id from stars_in_movies " + 
	  "inner join stars on stars_in_movies.star_id = stars.id " +
	  "where stars.first_name like ? " +
	  
	  searchStarQuery + 
	  
	  "on a.id = b.movie_id " +
	  "WHERE " + 
	  "a.title LIKE ? AND " +
	  "a.year LIKE ? AND " +
	  "a.director LIKE ? " +
	  "ORDER BY " + searchOrder +
	  " LIMIT ? OFFSET ?"
	);	
	PreparedStatement statement = dbcon.prepareStatement(query);
	statement.setString(1, "%" + starFirstName + "%");
	if (starLastName == "") statement.setString(2, "%" + starFirstName + "%");
	else statement.setString(2, "%" + starLastName + "%");
    statement.setString(3, "%" + searchTitle + "%");
	statement.setString(4, "%" + searchYear + "%");
	statement.setString(5, "%" + searchDirector + "%");
    statement.setInt(6, Integer.parseInt(searchLimit));
    statement.setInt(7, searchOffset);
	ResultSet rs = statement.executeQuery();
	
    out.println("<table border>");
    while (rs.next()) {
		String id = rs.getString("id");
		String title = rs.getString("title");
		String year = rs.getString("year");
		String banner = rs.getString("banner_url");

		String genreQuery = "SELECT * FROM genres " +
		"INNER JOIN genres_in_movies " + 
		"ON genres.id = genres_in_movies.genre_id " + 
		"WHERE genres_in_movies.movie_id = ?";
		PreparedStatement genreStatement = dbcon.prepareStatement(genreQuery);
		genreStatement.setString(1, id);
		ResultSet gs = genreStatement.executeQuery();
		HashMap<String, String > movieGenres = new HashMap<String, String>();
		while (gs.next()) {
			String genreID = gs.getString("id");
			String genreName = gs.getString("name");
			movieGenres.put(genreID, genreName);
		}
		
		String starQuery = "SELECT * FROM stars " +
		"INNER JOIN stars_in_movies " + 
		"ON stars.id = stars_in_movies.star_id " + 
		"WHERE stars_in_movies.movie_id = ?";
		PreparedStatement starStatement = dbcon.prepareStatement(starQuery);
		starStatement.setString(1, id);
		ResultSet stars = starStatement.executeQuery();
		HashMap<String, String > starsInMovie = new HashMap<String, String>();
		while (stars.next()) {
			String starID = stars.getString("id");
			String starFN = stars.getString("first_name");
			String starLN = stars.getString("last_name");
			starsInMovie.put(starID, starFN + starLN);
		}
		
		String htmlRow = "<tr>" +
		"  <td><a href=movies/" + id + ">" + title + " (" + year + ")</a></td>" +
		"  <td><img src='" + banner + "'></td>";
		
		htmlRow += "<td>";
		for (Map.Entry<String, String> genreEntry : movieGenres.entrySet()) {
			htmlRow += 		
			  "<a href='search?genre=" + genreEntry.getKey() +
			  "&numResults=25&orderBy=title+asc&search=browse&pageNum=1\'>" + genreEntry.getValue() + "</a> ";
		}
		htmlRow += "</td>";
		
		htmlRow += "<td>";
		for (Map.Entry<String, String> entry : starsInMovie.entrySet()) {
			htmlRow += "<a href='stars/" + entry.getKey() + "'>" + entry.getValue() + "</a> ";
		}
		htmlRow += "</td>";
		
		htmlRow += "</tr>";
		out.println(htmlRow);
	}
    out.println("</table>");

    rs.close();
    statement.close();
	
	String countQuery = (
	  "SELECT count(*) " +
      "FROM movies " +
      "WHERE " + 
	  "title LIKE ? AND " +
	  "year LIKE ? AND " +
	  "director LIKE ? " 
    );
	PreparedStatement countStatement = dbcon.prepareStatement(countQuery);
    countStatement.setString(1, "%" + searchTitle + "%");
	countStatement.setString(2, "%" + searchYear + "%");
	countStatement.setString(3, "%" + searchDirector + "%");
	ResultSet count = countStatement.executeQuery();
	int numResults = 0;
	while (count.next()) {
	  numResults = Integer.parseInt(count.getString("count(*)"));
	}
	int numPages = (numResults + Integer.parseInt(searchLimit) - 1) / Integer.parseInt(searchLimit);
	
	String href = "search";
	href += "?title=" + searchTitle 
		 + "&year=" + searchYear
		 + "&director=" + searchDirector
		 + "&star=" + searchStar
		 + "&numResults=" + searchLimit
		 + "&orderBy=" + searchOrder
		 + "&search=advanced";
	out.println("<ul class='pagination'>");
	int currentPage = Integer.parseInt(searchPage);
	if (currentPage > 1) out.println("<li><a href = '" + href + "&pageNum=" + (currentPage - 1) + "'>&laquo;</a></li>");
	for (int i = 1;  i <= numPages; i++) {
		String newHref = href + "&pageNum=" + i;
		if (i == currentPage)
			out.println("<li class='active'><a href='" + newHref + "'>" + i + "</a></li>");
		else
			out.println("<li><a href='" + newHref + "'>" + i + "</a></li>");
	}
	if (currentPage < numPages) out.println("<li><a href = '" + href + "&pageNum=" + (currentPage + 1) + "'>&raquo;</a></li>");
	out.println("</ul>");
	
	count.close();
    countStatement.close();
    dbcon.close();
	

  } catch (SQLException ex) {
    while (ex != null) {
      System.out.println ("SQL Exception: " + ex.getMessage());
      ex = ex.getNextException();
    }
  } catch (java.lang.Exception ex) {
    out.println("<p>SQL error: " +ex.getMessage() + "</p>");
  }
%>
